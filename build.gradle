// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.41'

    repositories {
        jcenter()
        maven {
            url 'https://dl.google.com/dl/android/maven2/'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://dl.bintray.com/mobilesolutionworks/release'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath 'com.mobilesolutionworks:works-publish:1.5.2'
        classpath 'gradle.plugin.io.gitlab.arturbosch:detekt-gradle-plugin:1.0.0.RC7-2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        maven {
            url 'https://dl.google.com/dl/android/maven2/'
        }
        jcenter()
    }
}

subprojects {
    apply plugin: "io.gitlab.arturbosch.detekt"

    detekt {
        version = "1.0.0.RC6-4"

        defaultProfile {
            input = "${project.projectDir.absolutePath}/src/main/kotlin"
            filters = ".*/resources/.*,.*/build/.*"
            config = file("default-detekt-config.yml")
            output = "build/reports/detekt"
            outputName = "detekt-report"
            baseline = "build/reports/detekt/baseline.xml"
        }
    }
}

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports")
}

task mergeJacocoReport(type: JacocoMerge, dependsOn: ":controller-test:createDebugCoverageReport") {
    group "Reporting"
    description "Merge Jacoco Code Coverage Report"

    def executionFiles = fileTree(dir: "test-app/build", includes: [
            "outputs/code-coverage/connected/*coverage.ec"
    ])

    setExecutionData(executionFiles)
    outputs.dir {
        file("build/jacoco")
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: "mergeJacocoReport") {
//task unifiedJacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Stub.*'
    ]

    // generated classes
    classDirectories = fileTree(
            dir: "library/build/tmp/kotlin-classes/debug"
    )

//    // sources
    sourceDirectories = files([
            "library/src/main/java",
            "library/src/main/kotlin"
    ])
    executionData = fileTree(dir: "build/jacoco", includes: [
            "*.exec"
    ])
}

task clean(type: Delete) {
    delete rootProject.buildDir
}